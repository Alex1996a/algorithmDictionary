#include <stdio.h>
#include <stdlib.h>

#define TRUE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define OVERFLOW -2
#define INIT_SIZE 20
#define INCREMENT_SIZE 5

typedef int SElemTypes;
typedef int Status;

typedef struct
{
	SElemType * base;
	SElemTyoe *top;
	int size;
}sqStack;

Status InitStack(SqStack *S)
{
	S->base = (SElemType*) malloc(init_SIZE * sizeof(SElemType));
	if (!s->base)
	{
		exit(OVERFLOW);
	}
	S->top = S->base;
	S->size = INIT_SIZE;
	return OK;
}

Status DestroyStack(SqStack *S)
{
	free(S->base);
	S->base = NULL;
	S->top = NULL;
	S->SIZE = 0 ;
	return OK;
}

Status ClearStack(SqStack *S)
{
	S->top = S->base;
	return OK;
}

Status IsEmpty(SqStack S)
{
	if(S.top == s.base)
	{
		return TRUE;
	}
	else
		return FALSE;
}

int GetLength(SqStack S)
{
	return S.top - S.base;
}

Status GetTop(SqStack S, SElemTYpe *e)
{
	if(S.top > S.base)
	{
		*e = *(--S.top);
		return OK;
	}
	else
	{
		return ERROR:
	}
}

Status Push(SqStack *S, SElemType e)
{
	if ((S->Top -S.base) / sizeof(SElemType> >= S-siiiiize)
	{
		S->base = (SElemType*) realloc (S->base,(S->size + INCREMENT_SIZE) * sizeof(SElemType));
		if ( !S->base)
		{
			exit(OVERFLOW);
		}
		S->top = S->base + S->size;
		S-Size += INCREMENT_SIZE;
	}
	*S->top = e;
	S->top++;
	return OK;
}

Status Pop(SqStack *S,SElemTYpe *e)
{
	if (S->top == S->base)
	{
		return ERROR;
	}
	S->top--;
	*e = *S->top;
	return OK;
}
void visit(SElemType e)
{
	printf("%d",e);
}

Status TraverseStack(SqStack s,void (*visit)(SELemTye))
{
	while(S.top > S.base)
	{
		visit(*S.base);
		S.base++;
	}
	return OK;
}
int main()
{
	SqStack s;
	if (InitStack(&S))
	{
		SElemType e;
		int i;
		
		print("init_success\n")
		
		if (IsEmpty(S))
		{
			printf("Stack is empty\n"));
		}

		for (i = 0; i < 10 ; i++)
		{
			Push(&S,i);
		}
		GetTop(S,&e);
		printf("The first element is %d\n",e);
		
		printf("length is %d\n",Getlength(S));
		
		Pop(&S,&e);
		print("Pop element is %d\n",e);
		
		TraverseStack(S,*visit);
		
		if (DestroyStack(&S))
		{
			printf("\ndestroy_success\n")
		}
	}
}







