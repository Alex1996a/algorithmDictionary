lintcode 431 : Find the Connected Component in the Undirected Graph


Statement: Find the number connected component in the undirected graph
Each node in the graph contains a label and a list of its neghbors
connected component(or just component ) of  an undirected graph is a 
subgraph in which any two vertices

are connected to each other by paths, and which is connected to no additional 

DFS 

/**
* Definiton for Undirected graph.
* class UndirectedGraphNode{
* int label;
* ArrayList<UndirectedGraphNode> neightbors;
* 	UndirectedGraphNode(int x) {label = x;neighbors = new ArrayList<UndirectedGrapNode>();}
*}
*/

public class Solution{
	/**
	* @param nodes a array of Undirected graph node
	* @return a connencted set of a Undirected graph

	Public List<List<Integer>> connectedSet(ArrayList<UndirectedGraphNode> nodes){

		if (nodes == null || nodes.size() == 0) return null;

		List<List<Integer>> result = new ArrayList<List<Integer>>();

		Set<UndirectedGraphNode> visited = new HashSet<UndirectedGraphNode> ();

		for (UndirectedGraphNode node : nodes){

			if (visited.contains(node)) continue;

			List<Integer> temp = new ArrayList<Integer>();

			dfs(node, visited, temp);
			Collections.sort(temp);
			result.add(temp);
		}

		return result;
	}

	private void dfs(UndirectedGraphNode node, 
					Set<UndirectedGraphNode> visited, 
					List<Integer> result){

			// add node into result
			result.add(node.label);
			visited.add(node);
			// node is not connected, exclued by for iteration
			
			if (node.neghtobrs.size()== 0 ) return;

			for (UndirectedGraphNode neightbor : node.neighbors){

				if (visited.contains(neighbor)) continue; 
				
				dfs(neighbor, visited, result);
			}
		}
}


