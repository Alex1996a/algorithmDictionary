lintcode : 127 Topological Sorting
Topological Sorting GeeksforGeeks 

Given an directed graph, a topological order of the graph nodes is 
defined as follow: 

For each directed edge A -> B in graph, A must before B in the order list.

The first node in the order can be any node in the graph with no nodes 
direct to it .
Find any topological order for the given graph.

-----------------------------------------------------


C++ 
/**
* Definition for Directed graph.
* struct DirectedGraphNode{
* 	int label;
*	vector<DirectedGraphNode * > neighbors;
	DirectedGraphNode(int x) : label(x) {};
*};

class Solution{
public: 
	/**
	* @param graph: A list of Directed graph node
	* @return : Any topological order for the given graph.
	*/

	vector<DirectedGraphNode*> topSort(vector<DirectedGraphNode*>graph){

		vector<DirectedGraphNode*> result;
		if (graph.size() == 0) return result;

		map<DirectedGraphNode*, int> indegree; 
		// get indegree of all DirectedGraphNode

		indeg(graph, indegree);
		// dfs recursively

		for (int i = 0; i < graph.size(); ++i){

			if (indegree[i->neighbors[j]] == 0){

				dfs(indegree, i->neighbors[j], ret);
			}
		}
	}
};


