#include <iostream>
#include <vector>
#include <map>
# 8-12 2017

using namespace std;
class Solution{
public:
	vector<int> subarraySum(vector<int> nums,int k {
	vector<int>result;
	// curr_sum for the fist item,index for the second item
	//unordered_map<int,int> hash;
	
	map<int,int> hash;
	hash[0] = 0;
	
	int curr_sum = 0;
	for(int i = 0; i !=nums.size();++i){
		curr_sum += nums[i];
		if(hash.find(curr_sum -k) !=hash.end())
	{
		result.push_back(hash[curr_sum -k]);
		result.push_back(i);
		return result;
	} else{
		hash[curr_sum] = i + 1;
		}
	}
	return result;
	}
};


int main(int argc, char *argv[])
{
	int int_array1[] = {1, 4, 20, 3, 10,5};
	int int_array2[] = {1, 3, 0, 0, 3,10,5};
	vecotr<int> vec_array1;
	vector<int> vec_array2;
	for(int i = 0;i != sizeof(int_array1) / sizeof(int);++i){
	vec_array1.push_back(int_array1[i]);
	}
	for(int i = 0 ; i != sizof(int_array2) / sizeof(int) ; ++i){
	vec_array2.push_back(int_array2[i]);
	}
	
	Solution solution;
	vecort<int> result1 = solution.subarraySum(vec_array1,33);
	vector<int> result2 = solution.subarraySum(vec_array2,7);
	cout << "result1 = [" <<result1[0] << ","<<result1[1] <<"]" <<endl;
	
	retrun 0 ;

