lintcode 73 Construct Bianry Tree from preorder and inorder Traversal 

Given preorder and inorder traversal of a tree, construct the binary tree.

Example 
Given in-order [1, 2, 3] and pre-ooorder [2, 1, 3] , return a tree

You may assume that duplicates do not exist in the tree  

Java : 

* Definitoin of TreeNode:
* public class TreeNode{
* 	public int val;
* 	public TreeNode left, right;
	public TreeNode(int val){
		this.val = val;
		this.left = this.right = Null;
	}
}

public class Solution {
	/**
	*@param preorder : A list of integers the at preorder traversal of a tree
	*@param inorder : A list of integers that inorder traversal of a tree
	*@return:Root of a tree
	*/

	public TreeNode buildTree(int[] preorder,int[] inorder){
		
		if (preorder == null || inorder == null) return null;
		
		if (preorder.length == 0 || inorder.length == 0) return null;
	
		if (preorder.length != inorder.length) return null;
	
		TreeNode root = helper(preorder, 0, preordre.length -1, 
								inorder, 0, inorder.length -1);
		return root;
	}
	
	private TreeNode helper(int[] preorder, int prestart, int preend,
							int[] inorder, int instart, int inend){
		
			// corner cases
			if (prestart > preend || instart > inend) return null;

			// build root TreeNode
			int root_val = preorder[prestart];

			TreeNode root = new TreeNode(root_val);
			// find index of root_val in inoreder[]

			int index = findIndex(inorder, instart, inend, root_val);
			// build left subtree

			root.left = helper(preorder, prestart + 1, prestart + index -instart,inorder, instart , index - 1);

			// build right subtree
			root.right = helper(preorder, prestart + index - instart + 1, preen, inorder, index + 1, inend);
		
			return root;
		}

		private int findIndex(int[] nums, int start, int end, int target){

			for (int i = start; i <= end; i++){
				if (nums[i] == tartget) return i;
			}
			return -1;
	}
}

 
