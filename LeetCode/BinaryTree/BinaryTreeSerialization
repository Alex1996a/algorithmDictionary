lintcode 7 Binary Tree Serialization

Python version:

""" 
Definition of TreeNode:
class TreeNode:
	def __init__(self, val):
		self.val = val 
 		self.left, self.right = None, None

"""

"""

class Solution0:
	'''
	@param root : An object of TreeNode , denote the root of the binary tree.

	this method will be invoked first , you should design your own algorithm.

	to serialize a binary tree which denote by a root node to a string which 
	
	can be easily deserialized by your own " deserialize " method later.

	'''

	def serialize(self, root):
		
		if not root:
				
			return ''

	def post_order(root):

		if root: 
			
			post_order(root.left)
			post_order(root.right)
			ret[0] += str(root.val) + ' , '
	
		else:

			ret[0] += '#'

	ret = ['']
	post_order(root)

	return ret[0][:-1] # remove last,


	'''
	@param data : A string serialized by your serialize method .
	
	This method will be invoked second , the argument data is what exactly

	you serialized at method "serialize " , that means the data is not given by

	system , it's given by your own serialize method . So the format of data si 

	designed by yourself, and deserialize it here as you serialize it in 

	"serialize" method.

	'''

	def deserialize(self, data):

		if not data:
		
			return 

		nodes = data.split(',')

		def post_order(nodes):

			if nodes[-1] == '#':

				nodes.pop()
				return None

			root = TreeNode(int(nodes.pop()))
			root.right = post_order(nodes)
			return root
		return post_order(nodes)

class Solutin1:

	'''
	@param root : An object of TreeNode, denote the root of the binary tree.

	This method will be invoked first , you should design your own algorithm
	to serialize a binary tree which denote by a root node to a string which
	can be easily deserialized by your own " 

	'''

	def serialize(self, root):

		if not root:

			return ''

		def pre_order(root):
		
			if root:
		
				ret[0] += str(root.val) + ','
				pre_order(root.left)
				pre_order(root.right)

			else:
				ret[0] += '#'

		ret = ['']
		pre_order(root)

		return ret[0][:-1] # remove last, 


	def deserialize(self, data):
	
		if not data:
			return 
	
		nodes = data.split(',')
		
		self.i = 0

		def pre_order(nodes):

			if nodes[self.i] == '#':
				return None

			root = TreeNode(int(nodes[self.i[))
			self.i += 1
			root.left = pre_order(nodes)
			self.i += 1	
			root.right = pre_order(nodes)
			return root

		return pre_order(nodes)

import collections

class Solution2:

	'''
	@param root: An object of TreeNode, denote the root of the binary tree.
	

	def serialize(self, root):
		
		if not root:

			return

		ret = []
		queue = collectinos.deque()
		queue.append(root)

		while queue:

			node = queue.popleft()

			if node:
			
				queue.append(node.left)
				queue.append(node.right)
				ret.append(str(node.val))

			else:
			
				ret.append('#')

		return ','.join(ret)


	def seserialize(self, data):
		
		if not data:
			
			return 

		nodes = data.split(',')

		root = TreeNode(int(nodes[0])
		i = 1
		queue = collections.deque()
		queue.append(root)

		while queue:

			node = queue.popleft()
			if nodes[i] == '#':

				node.left = None
			else:
			
				t = TreeNode(int(nodes[i]))
				node.left = t
				queue.append(t)

			i += 1
			if nodes[i] == '#':

				node.right = None 
			else:
		
				t = TreeNode(int(nodes[i]))
				node.right = t
				queue.append(t)

			i += 1
		return root 



