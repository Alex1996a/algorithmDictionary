/**
* Definition of ListNode
* class ListNode{
* public:
* 	int val;
* 	ListNode *next;
* 	ListNode(int val){
		this->val = val;
		this->next = NULL;
	}
*}



* Definition of TreeNode:
* class TreeNode{
* public:
* 	int val;
* 	TreeNode *left, *right;
	ThreeNode(int val){

		this->val = val;
		this->left = this->right = NULL;
	}
*}

class Solution{
public:
	/**
	* @param head: The first node of linked list.
	* @return : a tree node 
	*/

	TreeNOde *sortedListTOBST(ListNode *head)
{

	if (NULL == head){

		return NULL;
	}

	// get the size of List 
	ListNode *node = head;
	int len = 0;
	
	while (NULL != node){

		node = node->next;
		++len;
	}

	return buildBSTHelper(head, len);
	}

private:

	TreeNode *buildBSTHelper(ListNode *head, int length){
		
		if (NULL == head || length <= 0){
		
			return NULL;
		}

		// get the middle ListNode as root TreeNode

		ListNode *lndoe = head;
		int count = 0;

		while (count < length / 2){
			
			lnode = lnode->next;
			++count;
		}

		TreeNOde *root = new TreeNode(lnode->val);

		root->left = buildBSTHelper(head, length / 2);

		root->right = buildBSTHelper(lnode->next, length - 1 - length / 2);

		return root;
	}
};


