Balanced Binary Tree 

Given a binary treee, determine if it is height-balanced.

For this problem, a height-balanced binary tree i sdefined as a binary tree
in whic the depth o fthe two subtrees of every node never differ by more than 1.

C++ Recursion with extra bool variable

* Definition of TreeNOde:
* class TreeNode {
* public : 
*	int val;
	TreeNode *left, *right;
	TreeNode(int val){

		this->val = val;
		this->left = this->right = NULL;
		}
}


class Solution {

public:

	/**
	* @param root : The root of binary tree.
	* @return : True if this binary tree is Balanced, or false.

	bool isBalanced(TreeNode *root){

		if (NULL == root){

			return true;
		}

	bool result = true;
	maxDepth(root, result);

	return result;
	
	}

private:
	int maxDepth(TreeNode *root, bool &isBalanced){

		if (NULL == root){

			return 0;
		}

		int leftDepth = maxDepth(root->left, isBalanced);

		int rightDepth = maxDepth(root->right, isBalanced);

		if (abs(leftDepth - rightDepth) > 1){

			isBalanced = false;
			
			// speed up the recursion process
			return INT_MAX;
		}
		}

		return max(leftDepth, rightDepth) + 1;
	}
}
 
