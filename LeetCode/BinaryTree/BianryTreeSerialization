BinaryTree Srialization


Design an algorithm and write code to serialize and deserialize a binary tree.

Writing the tree to a file is called ' Srilization'

and reading back from the file to reconstruct 

the exact same binary tree is 'deserialization'

There is no limit of how you deserialize or serialize a binary tree.

you only need to make sure you can serialize a binary tree to a string.

Have you met this question in a real interview ? yes


Python:

""""
Definition of TreeNode:
class TreeNode:
	def __init__(self, val):
		sefl.val = val
		self.left, self.right = None, None

"""

class Solution0:

	'''
	@param root: An object of TreeNode , denot the root of the binary tree.
	
	This method will be invoked first , you should design your own algorithm
		to serialize a binary tree which denote by a root node to a string which 
		can be easily deserialized by your own "deserialize" method later.
	'''

	def serialize(self, root):
		
		if not root:
			return ''

		def post_order(root):
			
			if root:
				post_order(root.left)
				post_order(root.right)

				ret[0] += str(root.val) + ','

			else:
				ret[0] += '#, '

		ret = ['']
		post_order(root)

		return ret[0][:-1]	 # remove last , 

	'''

	@param data : A string serialized by your serialize method 
			
		This method will be invoked second, the argument data is what exactly

		you serizlize at method " Serizlize" , that means the data is not given by system,

		it's given by your own serialize method . SO the format of data is

		designed by yourself, and deserialize it here as you serialize it in 
		" serialize" method

		''''
		
		def deserialize(self, data):

			if not data:
				
				return 
	
			nodes = data.split(',')

		
			def post_order(nodes):

				if nodes[-1] == '#':

					nodes.pop()
					return None

				root = TreeNode(int(nodes.pop())
				root.right = post_order(nodes)
				root.left = post_order(nodes)
				
				return root 

			return post_order(nodes)

class Solution1:

	
		
