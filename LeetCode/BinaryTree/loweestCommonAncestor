10-15

Given the root and two nodes in a Binary Tree. Find the lowest common
ancestor(LCA) of the two nodes.

The lowest common ancestor is the node with largest depth which is the
ancestor of both nodes.


C++ Recursion From Bottom to Top 
/**
* Definition of TreeNode:
* class TreeNode {
* public:
* 	int val;
* 	TreeNode *left, *right;
*	TreeNode(int val){
*		this->val = val;
* 		this->left = this->right = NULL;
*		}
*}

class Solution{
public:
	/**
	* @param root : The root of the binary serch tree.
	* @param A and B: Two nodes in a binary.
	* @return: Return the least common ancestor(LCA) of the two nodes.

	TreeNode *lowestCommonAncestor(TreeNode *root, TreeNode *A, TreeNode *B){

		//return either A or B or NULL 

		if (NULL == root || root == A || root ==B) return root;

		TreeNode *left = lowestCommonAncestor(root->left, A, B);
		TreeNode *right = lowestCommonAncestor(root->right, A, B);
		
		//A and B are on both sides

		if ((NULL != left) && (NULL != right)) return root;

		// either left or right or NULL
	
		return (NULL !=left)? left : right;
		}
	}

