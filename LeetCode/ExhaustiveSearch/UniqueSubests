Given a list of numbers that may has duplicate numbers, return all possible
subsets

class Solution {
public:
	/**
	* @param S : A set of numbers
	* @return: A list of lists All valid subsets
	*/

	vector<vector<int> > subsetsWithDup(const vecctor<int> &s){

		vector<vector><int> result;

		if (S.empty()){

			return result;

		}
		
		vector<int> list;
		vector<int> source(S);
		sort(source.begin(), source.end());
		backtrack(result, list, source, 0);

		return result;	

		}

private:

	void backtreack(vector<vector<int> &ret, vector<int> &list,
					vector<int> &s, int pos){

			ret.push_back(list);

			for (int i = pos; i != s.size(); ++i){

				if (i != pos && s[j] == s[i -1 ]){
		
					continue;
				}

				list.push_back(s[i]);

				backtrack(ret, list, s, i + 1);

				list.pop_back();
			}
	}
}


