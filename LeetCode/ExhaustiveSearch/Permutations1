Given a list of numbers , return all possible permutations


Do it without recursion


Iteration 

class Solution:

	#param {integer[]} nums
	#@return {integer[][]}

	def permute(self, nums):

		if nums is None:

			return [[]]

		elif len(nums) <= 1:

			return [nums]

		# sort nums first

		nums.sort()

		result = []

		while True:

			result.append([] + nums)

			#step1: find nums[i] < nums[i + 1], loop backwards

			i = 0

			for i in xrange(len(nums) -2, -1, 1):

				if nums[i] < nums[i + 1]:

					break
				elif i == 0:

					return result

				#ste2: find nums[i] < nums[j], Loop backwards

				j = 0 
				for j in xrange(len(nums) - 1, i, -1):

					if nums[i] < nums[j]:
						
							break
				#step3: swap between nums[i] and nums[j]

				nums[i] , nums[j] = nums[j], nums[i]

				#step4: reverse between [i + 1, n -1]
				
				nums[i + 1:len(nums)] = nums[len(nums) -1:i:-1]

			return result



