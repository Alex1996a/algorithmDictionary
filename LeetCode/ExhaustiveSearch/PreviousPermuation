lintcode : 51 Previous Permuation


Given a list of integers, which denote a permutation
Find the previous permutation in ascending order

For [1, 3, 2, 3] the previous permutation is [1, 2, 3, 3]

class Solution:
	
	# @param num : a list of integer

	# @return : a list of integer

	def previousPermuation(self, num)

		if num is None or len(num) <= 1:

			return num

		#step1: find nums[i] > nums[i + 1] , loop backwards

		i = 0 
		for i in xrange(len(num) - 2, -1, -1):

			if num[i] > num[i + 1]:

				break 
			elif i == 0 : 

				#reverse nums if reach maximun 

				num = num[::-1]

				return num 

			#step2 : find nums[i] > nums[j], Loop backwards

			j = 0 

			for j in xrange(len(num) - 1, i , -1):

				if num[i] > num[j]:

					break

			# step3: swap between nums[i] and nums[j]

			num[i],numm[j] = num[j], num[i]

			#step4, reverse between [i + 1, n-1]

			num[i + 1:len(num)] = num[len(num -1: i:-1]

			return num 
