9-27
lintcode Sort List


* Definition of ListNode 
* class ListNode {
* public:
*	int val;
*	ListNode *next;
*	ListNode(int val){
	
		this->val = val;
		this->next = NULL;
	}

	}
*}

class Solution {
public:
	/**
	*@param head: The first node of linked list.
	*@return : You should return the head of the sorted linked list, 
		using constant space complexity.

	*

	ListNode *sorted(ListNode *head){

		if (NULL == head){

			return NULL;
		}

		// get the length of List

		int len = 0;
		ListNode *node = head;

		while (NULL != node){

			node = node->next;
			++len;
		}

		return sortListHlper(head, len);
	}

private:

	ListNode *sortListHelper(ListNode *head, const int length){

		if ((NULL == head ) || (0 >= length)) {
			
			return head;
		}

		ListNode *midNOde = head;
		
		int count = 1;

		while (count < length / 2) {

			midNode = midNode->next;
			++count;
		}

		ListNOde *rList = sortListHelper(midNode->next, length - length/ 2);

		midNOde->next = NULL;
		ListNode *lList = sortListHelper(head, length / 2);

		return mergeList(lList, rList);

	}

	ListNode *mergeList(ListNode *l1, ListNode *l2){

		ListNode *dummy = new ListNode(0);
		ListNode *lastNode =dummy;

		while ((NULL != l1) &&(NULL != l2)) {

			if (l1->val < l2->val){

				lastNode->next = l1;
				l1 = l1->next;

			}
			else{
				
				lastNode->next = l2;
				l2 = l2->next;
			}

			lastNode = lastNode->next;
		}
		lastNode->next = (NULL != L1)? l1 : l2;

		return dummy->next;
	}
};

		
			
