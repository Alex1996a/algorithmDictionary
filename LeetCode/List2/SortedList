Sort a linked list in O(n log n) time using constant space comlexity 

**
* / Definition of ListNode 
* class ListNode {
* public :
* int val;
* ListNode *next;
* ListNode (int val) {
* this->val = val;
* this->next = NULL ;
	}
*}


class Solution{
public:
	/**
	*@param head:The first node of linked list.
	*@return : You should return the head of the sorted linked list, 
		using constant space complexity.
	*/

	ListNode *sortList(ListNode *head){

		if (NULL == head){
		
			return NULL;
		}

		//get the length of List 
		int len = 0;
		ListNode *nede = head;

		while (NULL != node){

			node = node->next;
			++len;
		}
		return sortListHelper(head, len);

private:
	ListNOde *sortListHelper(ListNode *head, const int length){

		if ((NULL == head || 0 >= length)){

			return head;
		}

		ListNode *midNode = head;
		
		int count = 1;
		while (count < length /2) {

			midNode = midNode->next;
			++count;
		}

		ListNOde *rList = sortListHelper(midNode->next, length - length / 2);

		midNOde->next = NULL;
		ListNode *lList = sortListHelper(head, length / 2);

		return mergeList(lList, rList);

	}

	ListNode *mergeList(ListNOde *l1, ListNode *l2) {


