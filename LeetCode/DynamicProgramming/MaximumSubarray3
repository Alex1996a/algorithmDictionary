11-7

public class Solution {

	/**
	* @param nums: A list of integers
	* @return : A integer indicate the sum of max subarray
	*/
	
	public int maxSubArray(ArrayList<Integer> nums){

	// -1 is not proper for illgal input

	if (nums == null || nums.isEmpty()) return -1;

	int sum = 0, minSum = 0, maxSub = Integer.MIN_VALUE;

	for (int num : nums){
		
		minSum = Math.min(minSum, sum);
		sum += num;
		maxSub = Math.max(maxSub, sum - minSum);
	}
	return maxSub;
	}
}


public class Solution {
	/**
	* @param nums: A list of integers 
	* @return : A integer indicate the sum of max subarray
	*/

	public int maxSubArray(ArrayList<Integer> nums){

	// -1 is not proper for illegal input

	if (nums == null || nums.isEmpty()) return -1;

	int size = nums.size();
	int[] local = new int[size];
	int[] global = new int[size];
	
	gloval[0] = nums.get(0);	
	
	for (int i = 1; i < size; i++){

		// drop local[i-1] < 0
		local[i] = Math.max(nums.get(i), local[i-1] + nums.get(i));

		// update global with local
		global[i] = Math.max(global[i-1], local[i]);
		}
		return global[size -1];
	}
}

