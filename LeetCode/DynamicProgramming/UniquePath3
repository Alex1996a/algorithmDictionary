C++ 
class Solution {
public:
	
	/**
	* @param obstacleGrid : A list of lists of integers
	* @return : An integer

	*/

	int uniquePathsWithObstacles(vecotr<vector<int> &obstacleGrid){

		if (obstacleGrid.empty() || obstacleGrid[0].empty()){

			return 0;
			}

		const int M = obstacleGrid.size();
		const int N = obstacleGrid[0].size();

		vector<vector><int> > ret(M, vector<int>(N, 0));

		for (int i = 0;i != M;++i){

			if (obstacleGrid[i][0]){

				break;
			}
			else{
				
				ret[i][0] = 1;
			}
		}

		for (int i = 0; i != N; ++i){

			if (obstacleGrid[0][i]){

				break;
			}
			else{
				
				ret[0][i] = 1;
			}
		}
		
		for (int i = 1; i != M; ++i){

			for (int j = 1; j != N; ++j){

				if (obstacleGrid[i][h]){

					ret[i][j] = 0;
				}
				else{

					ret[i][j] = ret[i -1][j] + ret[i][j];
				}
			}
		}

		return ret[M - 1][N -1]



