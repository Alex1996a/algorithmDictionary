Given a linked list, determine if it has a cycle in it.

Challenge
Follow up:

Can you solve it without using extra space ?

/**
* Definition of ListNode 
* class ListNOde {
* Public:
*	int val;
*	ListNode *next;
*	ListNode(int val){
		
		this->val = val;
		this->next = NULL;
	}
}
*/

class Solution {
	public:
	/**

	* @param head: The first node of linked list.
	* @return : True if it has a cycle , or false
	*/

	bool hsaCycle(ListNode *head){

	if (NULL == head || NULL == head->next){
	
			return false;
	}
	
	ListNode *slow = head, *fast = head->next;
	while(NULL != fast && NULL != fast->next){

		fast = fast->next->next;
		slow =slow->next;
			
		if ( slow == fast ) return true;
	}
	
	return fasle;
	}
};

	
