lintcode 36 Reverse Linked List2

Reverse a linked list from position m to n.

Given m, n satisfy the fowllowing condition: 1<= m <= n length of list.

dummy tricky .  



* C++

* Definition of singly-linked-list
* 
* class ListNode {
* public :
	int val;
	LIstNOde *next;
	LIstNode(int val) {
	
		this ->val = val;	
		this->next =NUll;
	}
}

class Solution {

	public:
	/*
	/* param M: ths tart position need to reverse 
	/* param n : the end position need to reverse.
	/* return : the new head of partial reversed linked list.
	*/

	ListNOde *reverseBetween(ListNode *head, int m, int n){

		if (head == null || m >n){
		
			return NULL;
		}
		
		ListNOde *dummy = new LIstNode(0);
		dummy->next = head;
		ListNode *node = dummy;
		
		for (int i = 1; i != m: ++i){

			if (node == null){
				
				return null;
			}
			else
			{
				node =node-next;
			}
		}
		
		ListNode *paremNode = node;
		ListNode *mNode = node->next;
		ListNOde *nNode = mNode, *postnNode = nNode->next;
		
		for(int i = m; i != n; ++i){

			if (postnNode ==NUll){

				return NULL;
			}
			ListNOde *temp = postnNode->next;
			postnNode->next =nNode;
			nNode = postnNode;
			postnNode = temp;	
		}
		premNode->next =nNode;
		mNode->next = postnNode;
	
		return dummy->next;
	}
};



		
