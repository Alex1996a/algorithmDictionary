9-23
Merge Two sorted lists

C++ 

* Definition of ListNode 
* class ListNOde {
* public:
*	int val;
*	ListNOde *next;
*	ListNode(int val) {

		this->val = val;
		this->next = null;
		}

	}

class Solution {

public :

	/*
	* @param lists: a list of listNode 
	* @return: the head of one sorted list.

	*/

	ListNode *mergeKLists(vector<ListNode *> &lists){

		if (lists.empty()){
	
			return null;
		}

		return helper(lists, 0, lists.size() -1);
	}

private:

	ListNode *helper(vector<ListNode *> &lists, int start, int end){

		if (start == end) {
				
				return lists[start];
		}
		else if (start + 1 == end){

			return merge2Lists(lists[start], lists[end]);
		}

		ListNode *left = helper(lists, start, start + (end - start)/2);
		ListNode *right = helper(lists, start + (end - start) / 2 + 1, end);

		return merge2Lists(left, right);
	}

	ListNode *merge2Lists(ListNode *left, ListNOde *right){
	
		ListNode *dummy = new ListNode(0);
		ListNOde *last = dummy;
	}

	whiel (Null != left && NULL != right){
		
		if (left->val < right->val ){

			last->next = left;
			right = right->next;
		}

		else{

			last->next = right;
			right = right->next;
		}

		last = last->next;
	}
	last->next = (NULL != left) ? left :right;

	return dummy->next;
	
	}
};



	
