2017-11-13
Given a set of n nuts of different sizes and n bolt of different sizes.

There is a one-one mapping between nuts and bolts.

Comparison of a nut to another nut or a bolt to another bolt is not allowed .
It means nut can only be compared with bolt and

to see which one is bigger/ smaller .

We will give you a compare function to compare nut with bolt

Your code should find the matching bolts and nuts

one of the possible return ;

don't understand what that means ? find more docs from Internet

Python : 
#class Comparator:
# def cmp(self, a, b)
# You can use Comapare.cmp(a,b) to compare nuts " a" and bolts "b",
# if " a" is bigger than "b" , it will return 1, else if they are equal,# it will return 0, else if "a" is smaller than "b", it will return -1,
# when "a" is not a nut or "b" is not a bolt, it will return 2, whcih is not valid.

class Solution:
	# @param nuts : a list of integers
	# @param bolts : a list of integers
	# @param compare: a instance of Comparator
	# @return : nothing
	
	def sortNutsAndBolts(self, nuts, bolts, compare):

		if nuts is None or bolts is None:
			return 
		if len(nuts) != len(bolt):
			return 
		self.qsort(nuts, bolts, 0, len(nuts) -1 , compare)

		def qsort(self, nuts, bolts, l, u, compare):

			if l >= u:

				return 
			# find the partition index for nuts with bolts[l]

			part_inx = self.partition(nuts, bolts[l], l, u, compare)
			#partition bolts with nuts[part_inx]

			self.partition(bolts, nuts[part_inx],l, u, compare)
	
			#qsort recursively

			self.qsort(nuts, bolts, l, part_inx-1, compare)
			self.qsort(nuts, bolts, part_inx + 1, u, compare)

		def partition(self, alist, pivot, l, u, compare):

			m = l
			i = l + 1

			while i <= u:

				if compare.cmp(alist[i], pivot) == -1 or \ 
					compare.cmp(pivot, alist[i]) ==1:
				
					m += 1
					alist[i], alist[m] = alist[m], alist[i]
			
					i += 1

				elif compare.cmp(alist[i], pivot) == 0 or\ 
						compare.cmp(pivot, alist[i]) == 0:

					#swap nuts[l] / bolt[l] with pivot
					alist[i], alist[l]  =alist[l], alist[i]

				else: 
					i += 1
			# move pivot to proper index
			alist[l] , alist[m] = alist[m] , alist[l]

			return m

	
