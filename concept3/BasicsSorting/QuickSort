
out-in -place : 

def qsort1(alist):

	print(alist)
	if len(alist) <= 1:
		return alist
	else:
		piot = alist[0]
		return qsort1([ x for x in alist[1:] if x < pivot]) + \
					
					[piovt] + \ 
						sort1([x for x in alist[1:] if x >=pivot])



in-place: one index for partition
: lower bound and upper bound


def qsort2(alist, l, u):

	print(alist)
	if l >=  u:
		return 

	m = l
	for i in range(l +1, u +1):

		if alist[i] < alist[l]:
			m +=1
			alist[m], alist[i] = alist[i], alist[m]
			# swqp between m and l after partition, important 

	alist[m], alist[l] = alist[l], alist[m]
	qsort2(alist, l, m-1)
	qsort2(alist, m + 1, u)


